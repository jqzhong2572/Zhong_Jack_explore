library("ggplot2", lib.loc="~/R/win-library/3.3")
data(diamonds)
r_squared(diamonds)
r_squared(diamonds)
r_squared(diamonds)
num_summary(diamonds)
explore <- function(data, plotswitch = off, threshold = 0, bins = NULL) {
freq_table <- freq_table (data)
num_summary <- num_summary (data)
r_squared <- r_squared (data)
pearson_corr <- pearson_corr (data)
}
freq_table <- function(data) {
Num_Or_Log <- data[sapply(data, is.numeric|is.logical)]
return (lapply(data_NumOrLog, table))
}
num_summary <- function(data) {
Num <- data[sapply(data, is.numeric)]
return (summary(Num))
}
r_squared <- function(data) {
colname <- colnames(data)
pairwise_names <- c() # initiate pair of variables
pairwise_r_squared <- c() # initiate the r_squared
for (i in 1:(length(colname)-1)) {
for (j in (i+1):length(colname)) {
temp <- summary(lm(data[,i]~data[,j]))$r.squared
# do linear model on the paired columns and get the r.squared number
pairwise_names <- c(pairwise_names, paste(colname[i], colname[j], sep="-"))
# add the new pairnames to the old list
pairwise_r_squared <- c(pairwise_r_squared, temp)
# add teh new r_squared number to the old list
}
}
new_data <- data.frame(pairwise_names, pairwise_r_squared)
colnames(new_data) <- c("Variable Pairs", "R-squared")
return (new_data)
}
num_summary(diamonds)
r_squared(diamonds)
View(r_squared)
AD<-r_squared(diamonds)
View(AD)
View(AD)
r_squared <- function(data) {
colname <- colnames(data)
pairwise_names <- c() # initiate pair of variables
pairwise_r_squared <- c() # initiate the r_squared
for (i in 1:(length(colname)-1)) {
for (j in (i+1):length(colname)) {
temp <- summary(lm(data[,i]~data[,j]))$r.squared
# do linear model on the paired columns and get the r.squared number
pairwise_names <- c(pairwise_names, paste(colname[i], colname[j], sep="-"))
# add the new pairnames to the old list
pairwise_r_squared <- c(pairwise_r_squared, temp)
# add teh new r_squared number to the old list
}
}
new_data <- data.frame(pairwise_names, pairwise_r_squared)
colnames(new_data) <- c("Variable Pairs", "R-squared")
return (new_data)
}
AD<-r_squared(diamonds)
View(AD)
View(AD)
View(AD)
View(AD)
temp <- summary(lm(diamonds$cut~diamonds$color))$r.squared
lm(diamonds$cut~diamonds$color))$r.squared
summary(lm(diamonds$cut~diamonds$color)
)
summary(lm(diamonds$cut~diamonds$color)
)
View(diamonds)
View(diamonds)
r_squared <- function(data) {
data <- data[sapply(data, is.numeric)]
colname <- colnames(data)
pairwise_names <- c() # initiate pair of variables
pairwise_r_squared <- c() # initiate the r_squared
for (i in 1:(length(colname)-1)) {
for (j in (i+1):length(colname)) {
temp <- summary(lm(data[,i]~data[,j]))$r.squared
# do linear model on the paired columns and get the r.squared number
pairwise_names <- c(pairwise_names, paste(colname[i], colname[j], sep="-"))
# add the new pairnames to the old list
pairwise_r_squared <- c(pairwise_r_squared, temp)
# add teh new r_squared number to the old list
}
}
new_data <- data.frame(pairwise_names, pairwise_r_squared)
colnames(new_data) <- c("Variable Pairs", "R-squared")
return (new_data)
}
temp <- summary(lm(diamonds$cut~diamonds$color))$r.squared
r_squared <- function(data) {
data <- data[sapply(data, is.numeric)]
colname <- colnames(data)
pairwise_names <- c() # initiate pair of variables
pairwise_r_squared <- c() # initiate the r_squared
for (i in 1:(length(colname)-1)) {
for (j in (i+1):length(colname)) {
temp <- summary(lm(data[,i]~data[,j]))$r.squared
# do linear model on the paired columns and get the r.squared number
pairwise_names <- c(pairwise_names, paste(colname[i], colname[j], sep="-"))
# add the new pairnames to the old list
pairwise_r_squared <- c(pairwise_r_squared, temp)
# add teh new r_squared number to the old list
}
}
new_data <- data.frame(pairwise_names, pairwise_r_squared)
colnames(new_data) <- c("Variable Pairs", "R-squared")
return (new_data)
}
AD<-r_squared(diamonds)
View(AD)
View(AD)
temp <- summary(lm(diamonds$cut~diamonds$color))$r.squared
data <- diamonds[sapply(data, is.numeric)]
View(data)
View(data)
View(data)
View(data)
View(diamonds)
View(diamonds)
data <- diamonds[sapply(diamonds, is.numeric)]
View(data)
View(data)
freq_table <- function(data) {
Num_Or_Log <- data[sapply(data, is.numeric|is.logical)]
return (lapply(data_NumOrLog, table))
}
freq_table(diamonds)
pearson_corr <- function(data, threshold) {
Num <- data[sapply(data, is.numeric)] # creates a variable that only has the numeric
b <- combn(colnames(Num), 2) # finds all combinations of the name pairs
pairs <- paste(b[1,], b[2, ], sep = "-")
# the column names are seperated by - using paste function to paste the columns
c <- cor(Num, method = "pearson")
# finds the pearson correlation using the cor function and creates of matrix of the values
correlation <- c[which(lower.tri(c))]
# gets the correclation values of the lower triangular matrix since those match the column pairs
newdf <- data.frame(pairs, correlation) #create a new data frame with our pairs
newdf <- newdf[apply(newdf$correlation > threshold)]
return(newdf)
}
pearson_corr(diamonds)
pearson_corr <- function(data, threshold = 0) {
Num <- data[sapply(data, is.numeric)] # creates a variable that only has the numeric
b <- combn(colnames(Num), 2) # finds all combinations of the name pairs
pairs <- paste(b[1,], b[2, ], sep = "-")
# the column names are seperated by - using paste function to paste the columns
c <- cor(Num, method = "pearson")
# finds the pearson correlation using the cor function and creates of matrix of the values
correlation <- c[which(lower.tri(c))]
# gets the correclation values of the lower triangular matrix since those match the column pairs
newdf <- data.frame(pairs, correlation) #create a new data frame with our pairs
newdf <- newdf[apply(newdf$correlation > threshold)]
return(newdf)
}
pearson_corr(diamonds)
pearson_corr(diamonds,0)
pearson_corr(diamonds,0)
pearson_corr(diamonds,0.4)
View(AD)
View(AD)
ADB <- ADB[apply(ADB, ADB$R_squared>0.5)]
ADB <- ADB[apply(ADB, AD$R_squared>0.5)]
ADB <- AD[apply(ADB, AD$R_squared>0.5)]
pearson_corr <- function(data, threshold) {
Num <- data[sapply(data, is.numeric)] # creates a variable that only has the numeric
b <- combn(colnames(Num), 2) # finds all combinations of the name pairs
pairs <- paste(b[1,], b[2, ], sep = "-")
# the column names are seperated by - using paste function to paste the columns
c <- cor(Num, method = "pearson")
# finds the pearson correlation using the cor function and creates of matrix of the values
correlation <- c[which(lower.tri(c))]
# gets the correclation values of the lower triangular matrix since those match the column pairs
newdf <- data.frame(pairs, correlation) #create a new data frame with our pairs
newdf <- subset(newdf, correlation > threshold)
return(newdf)
}
pearson_corr(AD,0,5)
pearson_corr(AD,0.5)
View(AD)
View(AD)
pearson_corr(data = ,0.5)
b <- combn(colnames(data), 2)
View(b)
View(b)
pearson_corr <- function(data, threshold) {
Num <- data[sapply(data, is.numeric)] # creates a variable that only has the numeric
b <- combn(colnames(Num), 2) # finds all combinations of the name pairs
pairs <- paste(b[1,], b[2, ], sep = "-")
# the column names are seperated by - using paste function to paste the columns
c <- cor(Num, method = "pearson")
# finds the pearson correlation using the cor function and creates of matrix of the values
correlation <- c[which(lower.tri(c))]
# gets the correclation values of the lower triangular matrix since those match the column pairs
newdf <- data.frame(pairs, correlation) #create a new data frame with our pairs
newdf <- subset(newdf, correlation > threshold)
return(newdf)
}
pearson_corr(data = ,0.5)
pearson_corr(data = ,0.5)
Num <- data[sapply(data, is.numeric)] # creates a variable that only has the numeric
num
Num
View(Num)
View(Num)
pearson_corr <- function(data, threshold) {
Num <- data[sapply(data, is.numeric)] # creates a variable that only has the numeric
b <- combn(colnames(Num), 2) # finds all combinations of the name pairs
pairs <- paste(b[1,], b[2, ], sep = "-")
# the column names are seperated by - using paste function to paste the columns
c <- cor(Num, method = "pearson")
# finds the pearson correlation using the cor function and creates of matrix of the values
correlation <- c[which(lower.tri(c))]
# gets the correclation values of the lower triangular matrix since those match the column pairs
newdf <- data.frame(pairs, correlation) #create a new data frame with our pairs
return(newdf)
}
pearson_corr(data = ,0.5)
pearson_corr(data,0.5)
pearson_corr <- function(data, threshold) {
Num <- data[sapply(data, is.numeric)] # creates a variable that only has the numeric
b <- combn(colnames(Num), 2) # finds all combinations of the name pairs
pairs <- paste(b[1,], b[2, ], sep = "-")
# the column names are seperated by - using paste function to paste the columns
c <- cor(Num, method = "pearson")
# finds the pearson correlation using the cor function and creates of matrix of the values
correlation <- c[which(lower.tri(c))]
# gets the correclation values of the lower triangular matrix since those match the column pairs
newdf <- data.frame(pairs, correlation) #create a new data frame with our pairs
newdf <- subset(newdf, correlation > threshold)
return(newdf)
}
pearson_corr(data,0.5)
class(pearson_corr(data,0.5))
freq_table <- function(data) {
Num_Or_Log <- c(data[sapply(data, is.numeric)], sapply(data, is.logical))
return (lapply(data_NumOrLog, table))
}
freq_table(diamonds)
freq_table <- function(data) {
Num_Or_Log <- c(data[sapply(data, is.numeric)], sapply(data, is.logical))
return (lapply(data_NumOrLog, table))
}
freq_table <- function(data) {
Num_Or_Log <- c(data[sapply(data, is.numeric)], sapply(data, is.logical))
return (lapply(data_NumOrLog, table))
}
freq_table(diamonds)
freq_table <- function(data) {
Num_Or_Log <- c(data[sapply(data, is.numeric)], sapply(data, is.logical))
return (lapply(Num_Or_Log, table))
}
freq_table(diamonds)
?class
summary(class)
freq_table <- function(data) {
Num_Or_Log <- c(data[sapply(data, is.categorical)], sapply(data, is.logical))
return (lapply(Num_Or_Log, table))
}
freq_table(diamonds)
?is.logical
summary(diamonds)
class(diamonds$cut)
class(summary(diamonds))
class(diamonds)
class(diamonds$color)
class(diamonds$clarity)
Num_Or_Log <- c(data[sapply(data, is.factor)], sapply(data, is.logical))
freq_table <- function(data) {
Num_Or_Log <- c(data[sapply(data, is.factor)], sapply(data, is.logical))
return (lapply(Num_Or_Log, table))
}
freq_table(diamonds)
freq_table <- function(data) {
Num_Or_Log <- c(data[sapply(data, is.factor)], data[sapply(data, is.logical)])
return (lapply(Num_Or_Log, table))
}
Num_Or_Log <- c(diamonds[sapply(diamonds, is.factor)], sapply(, is.logical))
source('~/GitHub/Zhong_Jack_explore/Zhong_Jack_explore.R', echo=TRUE)
freq_table <- function(data) {
Num_Or_Log <- c(data[sapply(data, is.factor)], data[sapply(data, is.logical)])
return (lapply(Num_Or_Log, table))
}
freq_table(diamonds)
